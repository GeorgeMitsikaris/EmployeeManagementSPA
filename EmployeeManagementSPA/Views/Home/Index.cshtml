@{
    ViewBag.Title = "A Simple Single Page Application";
}

<div class="container mt-3">
    <div class="row">
        <button class="btn btn-primary m-auto" data-toggle="modal" data-target="#insertModal">Create New</button>
        <button class="btn btn-primary m-auto" id="backToList">Reset table</button>
    </div>
    <div class="row col-sm-12">
        <div class="text-left display-4 m-auto">Employees</div>
        <table id="tblEmployees" class="table table-bordered table-hover table-responsive text-center mt-3">
            <thead>
                <tr class="table-dark">
                    <td class="font-weight-bold">
                        <button id="sortByName" class="btn btn-block btn-warning">
                            <span class="pr-3 d-inline">Name</span>
                            <span class="fa fa-arrow-up pr-1"></span>
                            <span class="fa fa-arrow-down"></span>
                        </button>
                        <div class="input-group-append">
                            <input id="txtSearchName" type="text" class="form-control" placeholder="Search" />
                            @*<button id="searchName" class="fa fa-search btn btn-light"></button>*@
                        </div>
                    </td>
                    <td class="font-weight-bold">
                        <button id="sortByEmail" class="btn btn-block btn-warning mr-3">
                            <span class="pr-3 d-inline">Email</span>
                            <span class="fa fa-arrow-up pr-1"></span>
                            <span class="fa fa-arrow-down"></span>
                        </button>
                        <div class="input-group-append">
                            <input id="txtSearchEmail" type="text" class="form-control" placeholder="Search" />
                            @*<button id="searchEmail" class="fa fa-search btn btn-light"></button>*@
                        </div>
                    </td>
                    <td class="font-weight-bold">
                        <button id="sortBySalary" class="btn btn-block btn-warning mr-3">
                            <span class="pr-3 d-inline">Salary</span>
                            <span class="fa fa-arrow-up pr-1"></span>
                            <span class="fa fa-arrow-down"></span>
                        </button>
                        <div class="input-group-append">
                            <input id="txtSearchSalary" type="text" class="form-control" placeholder="Search" />
                            @*<button id="searchSalary" class="fa fa-search btn btn-light"></button>*@
                        </div>
                    </td>
                    <td colspan="3" class="font-weight-bold">Actions</td>
                </tr>
            </thead>
            <tbody id="tblBody"></tbody>
        </table>
        <div class="m-auto">
            <div class="form-group">
                <label for="numberOfRows" class="">Enter the number of rows per page</label>
                <input type="number" value="5" id="numberOfRows" class="form-control" />
            </div>
        </div>
        <div class="m-auto">
            <ul id="paginationUl" class="pagination"></ul>
        </div>
    </div>
</div>
<div id="dialogInsert" title="Success" style="display:none">
    <p class="text-success">Employee created successfully!</p>
</div>
<div id="dialogEdit" title="Success" style="display:none">
    <p class="text-success">Employee updated successfully!</p>
</div>
<div id="dialogDelete" title="Success" style="display:none">
    <p class="text-success">Employee deleted successfully!</p>
</div>
<div id="dialogError" title="Error" style="display:none">
    <p class="text-danger">Something went wrong. Please try again</p>
</div>

@* Modal for showing the details of an employee *@
<div id="employeeDetails" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Employee Details</div>
                <button class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="displayName">Name</label>
                    <input id="displayName" type="text" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label for="displayEmail">Email</label>
                    <input id="displayEmail" type="text" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label for="displaySalary">Salary</label>
                    <input id="displaySalary" type="text" disabled class="form-control" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

@*Modal for creating a new employee*@
<div id="insertModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Add New Employee</div>
                <button class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form>
                    <input type="hidden" id="employeeId" />
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="text" id="name" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="email" id="email" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="salary">Salary</label>
                        <input type="text" id="salary" class="form-control" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="btnInsert" class="btn btn-info" data-dismiss="modal">Create</button>
                <button class="btn btn-danger" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@*modal for editing an existing employee*@
<div id="editModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Edit Item Type</div>
                <button class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form>
                    <input id="editId" type="hidden" />
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="text" id="editName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="email" id="editEmail" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="salary">Salary</label>
                        <input type="text" id="editSalary" class="form-control" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="btnEditItem" class="btn btn-info" data-dismiss="modal">Save</button>
                <button class="btn btn-danger" data-dismiss="modal">Cancel</button>&
            </div>
        </div>
    </div>
</div>

@* modal for deleting an employee *@
<div id="deleteModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Are you sure you want to delete this Item Type?</div>
                <button class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form>
                    <input id="deleteId" type="hidden" />
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="text" id="deleteName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="email" id="deleteEmail" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="salary">Salary</label>
                        <input type="text" id="deleteSalary" class="form-control" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="btnDeleteItem" class="btn btn-info" data-dismiss="modal">Delete</button>
                <button class="btn btn-danger" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script>
    let pageNumber = 1;
    let rowsPerPage = 5;
    let sortDirection = 'asc';
    let sortingColumn = 'Name';
    $(document).ready(function () {
        //Declaration of variables
        const searchName = $('#txtSearchName');
        const searchEmail = $('#txtSearchEmail');
        const searchSalary = $('#txtSearchSalary');
        const dialogInsert = $('#dialogInsert').dialog({ autoOpen: false })
        const dialogEdit = $('#dialogEdit').dialog({ autoOpen: false })
        const dialogDelete = $('#dialogDelete').dialog({ autoOpen: false })
        const dialogError = $('#dialogError').dialog({ autoOpen: false })

        //Call the function getEmployees() which is declared below using hoisting
        getEmployees(sortingColumn, sortDirection, pageNumber, rowsPerPage);

        //Ajax call to create a new employee
        $('#btnInsert').click(function () {
            const Name = $('#name').val();
            const Email = $('#email').val();
            const Salary = $('#salary').val();
            $.ajax({
                url: '/employees',
                method: 'post',
                //Using concise ES6 syntax
                data: { Name, Email, Salary },
                success: function () {
                    getEmployees('Name', 'asc', 1, 5);
                    dialogInsert.dialog('open');
                },
                error: function (error) {
                    console.log(error);
                    dialogError.dialog('open');
                }
            })
        })

        //Ajax call to update the Employee details
        $('#btnEditItem').click(function () {
            const id = $('#editId').val();
            const Name = $('#editName').val();
            const Email = $('#editEmail').val();
            const Salary = $('#editSalary').val();

            $.ajax({
                url: '/employees/' + id,
                method: 'put',
                //Using concise ES6 syntax
                data: { Name, Email, Salary },
                success: function () {
                    getEmployees('Name', 'asc', 1, 5);
                    dialogEdit.dialog('open');
                },
                error: (err) => {
                    console.log(err);
                    $('#dialogError').dialog();
                }
            })
        })

        //Ajax call to delete the Employee
        $('#btnDeleteItem').click(function () {
            const id = $('#deleteId').val();
            $.ajax({
                url: '/employees/' + id,
                method: 'delete',
                success: function () {
                    getEmployees('Name', 'asc', 1, 5);
                    dialogDelete.dialog('open');
                },
                error: (err) => {
                    console.log(err);
                    $('#dialogError').dialog();
                }
            })
        })

        //Changes the number of pages by user selection
        $('#numberOfRows').change(function () {
            getEmployees(sortingColumn, sortDirection, pageNumber, $(this).val())
            rowsPerPage = $(this).val();
        })

        //Resets the list of employees to initial state
        $('#backToList').click(function () {
            getEmployees('Name', 'asc', 1, 5);
            $('#numberOfRows').val('5');
        })

        //Sorts the employees by name
        $('#sortByName').click(function () {
            getEmployees('Name', sortDirection, pageNumber, rowsPerPage);
            sortDirection === 'asc' ? sortDirection = 'desc' : sortDirection = 'asc';
            sortingColumn = 'Name';
        })

        //Sorts the employeesby email
        $('#sortByEmail').click(function () {
            getEmployees('Email', sortDirection, pageNumber, rowsPerPage);
            sortDirection === 'asc' ? sortDirection = 'desc' : sortDirection = 'asc';
            sortingColumn = 'Email';
        })


        //Sorts the employeesby salary
        $('#sortBySalary').click(function () {
            getEmployees('Salary', sortDirection, pageNumber, rowsPerPage);
            sortDirection === 'asc' ? sortDirection = 'desc' : sortDirection = 'asc';
            sortingColumn = 'Salary';
        })

        //Fetching the names for the autocomplete and
        searchName.autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/employees/employeeNames?searchTerm=' + request.term,
                    method: 'get',
                    success: function (data) {
                        response(data);
                    },
                    error: function (error) {
                        console.log(error);
                        $('#dialogError').dialog();
                    }
                })
            },
            // Fetching the employee(s) by the selected name
            close: function () {
                const name = $(this).val();
                $.ajax({
                    url: '/employees/searchByName?name=' + name,
                    method: 'get',
                    success: function (response) {
                        searchName.val('');
                        $('#tblEmployees').find("tr:gt(0)").remove();
                        $.each(response, (ind, val) => {
                            createTable(val.Id, val.Name, val.Email, val.Salary);
                        })
                    }
                })
            }
            //Highlights the selected text using regular expression with case sensitivity
        }).data('ui-autocomplete')._renderItem = function (ul, item) {
            var expression = new RegExp("(" + this.term + ")", 'gi');
            var answer = item.label.replace(expression, "<span style='color:#f00'>$1</span>")

            return $('<li></li>').append('<a>' + answer + '</a>').appendTo(ul);
        }

        //Fetching the emails for the autocomplete
        searchEmail.autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/employees/employeeEmails?searchTerm=' + request.term,
                    method: 'get',
                    success: function (data) {
                        response(data);
                    },
                    error: function (error) {
                        console.log(error);
                        $('#dialogError').dialog();
                    }
                })
            },
            // Fetching the employee by the selected email
            close: function () {
                const email = $(this).val();
                $.ajax({
                    url: '/employees/searchByEmail?email=' + email,
                    method: 'get',
                    success: function (response) {
                        searchEmail.val('');
                        $('#tblEmployees').find("tr:gt(0)").remove();
                        $.each(response, (ind, val) => {
                            createTable(val.Id, val.Name, val.Email, val.Salary);
                        })
                    }
                })
            }
            //The following code highlights the selected text using regular expression
        }).data('ui-autocomplete')._renderItem = function (ul, item) {
            var expression = new RegExp("(" + this.term + ")", 'gi');
            var answer = item.label.replace(expression, "<span style='color:#f00'>$1</span>")


            return $('<li></li>').append('<a>' + answer + '</a>').appendTo(ul);
        }

        //Fetching the salaries for the autocomplete
        searchSalary.autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/employees/employeeSalaries?searchTerm=' + request.term,
                    method: 'get',
                    success: function (data) {
                        response(data);
                    },
                    error: function (error) {
                        console.log(error);
                        $('#dialogError').dialog();
                    }
                })
            },
            // Fetching the employee(s) by the selected salary
            close: function () {
                const salary = $(this).val();
                $.ajax({
                    url: '/employees/searchBySalary?salary=' + salary,
                    method: 'get',
                    success: function (response) {
                        searchSalary.val('');
                        $('#tblEmployees').find("tr:gt(0)").remove();
                        $.each(response, (ind, val) => {
                            createTable(val.Id, val.Name, val.Email, val.Salary);
                        })
                    }
                })
            }
            //The following code highlights the selected text using regular expression
        }).data('ui-autocomplete')._renderItem = function (ul, item) {
            var expression = new RegExp("(" + this.term + ")", 'gi');
            var answer = item.label.replace(expression, "<span style='color:#f00'>$1</span>")


            return $('<li></li>').append('<a>' + answer + '</a>').appendTo(ul);
        }

        //Triggers the search functionality in case the user chooses not to use the autocomplete 
        //and type the whole name pressing enter or tab
        searchName.change(function () {
            const name = $(this).val();
            $.ajax({
                url: '/employees/searchByName?name=' + name,
                method: 'get',
                success: function (response) {
                    //Next line needs to be outside the loop because triggeres autocomplete ajax call
                    searchName.autocomplete('close');
                    $('#tblEmployees').find("tr:gt(0)").remove();
                    searchName.val('');
                    $.each(response, (ind, val) => {
                        createTable(val.Id, val.Name, val.Email, val.Salary);
                    })
                },
                error: function (error) {
                    console.log(error);
                    $('#dialogError').dialog();
                }
            })
        })

        //Triggers the search functionality in case the user chooses not to use the autocomplete 
        //and type the whole email pressing enter or tab
        searchEmail.change(function () {
            const email = $(this).val();
            $.ajax({
                url: '/employees/searchByEmail?email=' + email,
                method: 'get',
                success: function (response) {
                    //Next line needs to be outside the loop because triggeres autocomplete ajax call
                    searchEmail.autocomplete('close');
                    $('#tblEmployees').find("tr:gt(0)").remove();
                    searchEmail.val('');
                    $.each(response, (ind, val) => {
                        createTable(val.Id, val.Name, val.Email, val.Salary);
                    })
                },
                error: function (error) {
                    console.log(error);
                    $('#dialogError').dialog();
                }
            })
        })

        //Triggers the search functionality in case the user chooses not to use the autocomplete 
        //and type the whole salary pressing enter or tab
        searchSalary.change(function () {
            const salary = $(this).val();
            $.ajax({
                url: '/employees/searchBySalary?salary=' + salary,
                method: 'get',
                success: function (response) {
                    //Next line needs to be outside the loop because triggeres autocomplete ajax call
                    searchSalary.autocomplete('close');
                    $('#tblEmployees').find("tr:gt(0)").remove();
                    searchSalary.val('');
                    $.each(response, (ind, val) => {
                        createTable(val.Id, val.Name, val.Email, val.Salary);
                    })
                },
                error: function (error) {
                    console.log(error);
                    $('#dialogError').dialog();
                }
            })
        })
    })


    //Functions-----------------------------------------------------------------------------------------

    // Ajax call to get the total number of employees to use it for pagination
    function getEmployees(sortingColumn, sortDirection, pageNumber, rowsPerPage) {
        const table = $('#tblEmployees')
        let totalRows = 0;
        $.ajax({
            url: '/employees',
            method: 'get',
            success: function (response) {
                totalRows = response.length
            },
            error: function (error) {
                console.log(error);
                $('#dialogError').dialog();
            }
            //We need the total number of rows in order to do the pagination
            //'done()' guarantees that the following code will execute after the completion of the previous ajax call
        }).done(() => {
            $.ajax({
                //Line is broken for better readability in github
                url: `/employees/sortBy${sortingColumn}?sort=${sortDirection}&pageNumber=${pageNumber}
                                                                                &numberOfRowsPerPage=${rowsPerPage}`,
                method: 'get',
                success: function (response) {
                    //Removes the current rows from the table in order to create the new ones
                    table.find("tr:gt(0)").remove();

                    //Removes the paging buttons
                    $('#paginationUl').empty();

                    //Creates the previous button
                    //If the user is in the first page and presses the previous button the app doesn't break
                    //and stays in the first page
                    const numberOfPages = Math.ceil(totalRows / rowsPerPage);
                    let prevPageNumber = pageNumber;
                    $(`<li class="page-item">
                        <button data-page="${prevPageNumber == 1 ? 1 : prevPageNumber - 1}" data-rows="${rowsPerPage}"
                            data-sortdirection=${sortDirection} data-sortbycolumn=${sortingColumn} onclick="pagination(this)" 
                            class="page-link">Prev
                        </button>
                 </li>`).appendTo('#paginationUl');

                    //Creates the paging buttons
                    for (var i = 0; i < numberOfPages; i++) {
                        //Finds the current page and highlighs the respective button
                        if (i + 1 == pageNumber) {
                            $(`<li class="page-item active">
                        <button data-page="${i + 1}" data-rows="${rowsPerPage}" data-sortdirection=${sortDirection} 
                            data-sortbycolumn=${sortingColumn} onclick="pagination(this)" class="page-link">${i + 1}
                        </button>
                 </li>`).appendTo('#paginationUl');
                        }
                        else {
                            $(`<li class="page-item">
                        <button data-page="${i + 1}" data-rows="${rowsPerPage}" data-sortdirection=${sortDirection} 
                            data-sortbycolumn=${sortingColumn} onclick="pagination(this)" class="page-link">${i + 1}
                        </button>
                 </li>`).appendTo('#paginationUl');

                        }
                    }

                    //Creates the next button
                    //If the user is in the last page and presses the next button the app doesn't break and stays 
                    //in the last page
                    let nextPageNumber = pageNumber;
                    $(`<li class="page-item">
                        <button data-page="${nextPageNumber == numberOfPages ? nextPageNumber : nextPageNumber + 1}" 
                            data-rows="${rowsPerPage}" data-sortdirection=${sortDirection} data-sortbycolumn=${sortingColumn} 
                            onclick="pagination(this)" class="page-link">Next
                        </button>
                 </li>`).appendTo('#paginationUl');

                    // The edit and delete buttons are created dynamically with the createTable() function
                    $.each(response, (ind, val) => {
                        createTable(val.Id, val.Name, val.Email, val.Salary.toFixed(2));
                    })
                }
            })
        })
    }

    //Is triggered when a pagination button is clicked and does the pagination
    function pagination(element) {
        pageNumber = $(element).data('page');
        rowsPerPage = $(element).data('rows');
        sortDirection = $(element).data('sortdirection');
        sortingColumn = $(element).data('sortbycolumn');

        getEmployees(sortingColumn, sortDirection, pageNumber, rowsPerPage)
    }

    //Finds the employee to be edited and fills the fields of the modal with their respective values
    function editItem(element) {
        //Retrieves the id from the custom data-id attribute
        const id = $(element).data('id');
        $.ajax({
            url: '/employees/' + id,
            method: 'get',
            success: function (response) {
                fillModalInputFields('edit', response)
            },
            error: function (error) {
                console.log(error);
                $('#dialogError').dialog();
            }
        })
    }

    //Finds the employee to be deleted and fills the fields of the modal with their respective values
    function deleteItem(element) {
        //Retrieves the id from the custom data-id attribute
        const id = $(element).data('id');
        $.ajax({
            url: '/employees/' + id,
            method: 'get',
            success: function (response) {
                fillModalInputFields('delete', response)
            },
            error: function (error) {
                console.log(error);
                $('#dialogError').dialog();
            }
        })
    }

    //Shows the details of the specific employee
    function details(element) {
        //Retrieves the id from the custom data-id attribute
        const id = $(element).data('id');
        $.ajax({
            url: '/employees/' + id,
            method: 'get',
            success: function (response) {
                fillModalInputFields('display', response);
            },
            error: function (error) {
                console.log(error);
                $('#dialogError').dialog();
            }
        })

    }

    //Helper Functions
    //-------------------------------------------------------------------------------------------------------
    //Creates the table after the ajax calls for getting and sorting the employees
    function createTable(id, name, email, salary) {
        //Manking the table responsive by adding hamburger menu for actions
        if ($(document).width() <= 992) {
            $('#tblEmployees').append(`
            <tr>
                <td>${name}</td>
                <td>${email}</td>
                <td>${salary}</td>
                <td>
                    <nav class="navbar navbar-expand-lg navbar-light bg-light">
                      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo${id}">
                        <span class="navbar-toggler-icon"></span>
                      </button>

                      <div class="collapse navbar-collapse" id="navbarTogglerDemo${id}">
                        <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
                          <li class="nav-item">
                            <button type="button" onclick="details(this)" class="btn btn-dark" data-toggle="modal"
                                data-target="#employeeDetails" data-id="${id}">Details</button>
                          </li>
                          <li class="nav-item">
                             <button type="button" onclick="editItem(this)" class="btn btn-dark" data-toggle="modal"
                                data-target="#editModal" data-id="${id}">Edit</button>
                          </li>
                          <li class="nav-item">
                           <button type="button" onclick="deleteItem(this)" class="btn btn-danger" data-toggle="modal"
                                data-target="#deleteModal" data-id="${id}">Delete</button>
                          </li>
                        </ul>                       
                      </div>
                    </nav>
                </td>
            </tr>`
            )
        }
        else {
            $('#tblEmployees').append(`
            <tr>
                <td>${name}</td>
                <td>${email}</td>
                <td>${salary}</td>
                <td>
                    <button type="button" onclick="details(this)" class="btn btn-dark" data-toggle="modal"
                        data-target="#employeeDetails" data-id="${id}">Details</button>
                </td>
                <td>
                    <button type="button" onclick="editItem(this)" class="btn btn-dark" data-toggle="modal"
                        data-target="#editModal" data-id="${id}">Edit</button>
                </td>
                <td>
                    <button type="button" onclick="deleteItem(this)" class="btn btn-danger" data-toggle="modal"
                        data-target="#deleteModal" data-id="${id}">Delete</button>
                </td>
            </tr>`
            )
        }
    }

    //Fills the modals for editing and deleting an employee
    //value has to be type of string, response is the http response from the ajax call
    function fillModalInputFields(value, response) {
        $('#' + value + 'Name').val(response.Name)
        $('#' + value + 'Email').val(response.Email)
        $('#' + value + 'Salary').val(response.Salary)
        $('#' + value + 'Id').val(response.Id)
    }
</script>
